/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Vaultlending","structs":{},"methods":[{"name":"set_vault_asset","args":[{"type":"uint64","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Admin chooses which ASA (like USDC) the vault uses.","events":[],"recommendations":{}},{"name":"whitelist_account","args":[{"type":"address","name":"account"},{"type":"bool","name":"allowed"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Admin whitelists an account for withdraw/borrow.","events":[],"recommendations":{}},{"name":"deposit_algo","args":[{"type":"pay","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deposit ALGO into vault.","events":[],"recommendations":{}},{"name":"deposit_asset","args":[{"type":"axfer","name":"asset_txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deposit USDC (or ASA) into vault.","events":[],"recommendations":{}},{"name":"withdraw_algo","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw ALGO from vault (only if whitelisted).","events":[],"recommendations":{}},{"name":"withdraw_asset","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw USDC/ASA from vault (only if whitelisted).","events":[],"recommendations":{}},{"name":"borrow_to_merchant","args":[{"type":"address","name":"merchant"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Credit officer borrows from vault and transfers to merchant.","events":[],"recommendations":{}},{"name":"repay_loan","args":[{"type":"axfer","name":"asset_txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Borrower repays loan in vault asset (e.g., USDC).","events":[],"recommendations":{}},{"name":"get_balance","args":[{"type":"address","name":"account"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Return combined ALGO + asset balance.","events":[],"recommendations":{}},{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Simple test method.","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"vault_asset":{"keyType":"AVMString","valueType":"AVMUint64","key":"dmF1bHRfYXNzZXQ="},"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"algo_deposits":{"keyType":"address","valueType":"uint64","prefix":"YWxnb19kZXBvc2l0cw=="},"asset_deposits":{"keyType":"address","valueType":"uint64","prefix":"YXNzZXRfZGVwb3NpdHM="},"whitelist":{"keyType":"address","valueType":"bool","prefix":"d2hpdGVsaXN0"}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[516],"errorMessage":"CREDIT_OFFICER_NOT_WHITELISTED"},{"pc":[387,452],"errorMessage":"INSUFFICIENT_BALANCE"},{"pc":[324,595],"errorMessage":"INVALID_ASSET"},{"pc":[528],"errorMessage":"MERCHANT_NOT_WHITELISTED"},{"pc":[201,232],"errorMessage":"NOT_ADMIN"},{"pc":[369,435],"errorMessage":"NOT_WHITELISTED"},{"pc":[94],"errorMessage":"OnCompletion must be NoOp"},{"pc":[183],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[264,315],"errorMessage":"SENDER_MISMATCH"},{"pc":[545],"errorMessage":"VAULT_EMPTY"},{"pc":[257,308,602],"errorMessage":"WRONG_RECEIVER"},{"pc":[199,230],"errorMessage":"check self.admin exists"},{"pc":[322,468,561,593],"errorMessage":"check self.vault_asset exists"},{"pc":[684],"errorMessage":"invalid number of bytes for (len+utf8[])"},{"pc":[223],"errorMessage":"invalid number of bytes for bool8"},{"pc":[191,357,423,504],"errorMessage":"invalid number of bytes for uint64"},{"pc":[215,496,636],"errorMessage":"invalid number of bytes for uint8[32]"},{"pc":[301,586],"errorMessage":"transaction type is axfer"},{"pc":[250],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAEIBCYHDmFzc2V0X2RlcG9zaXRzAQALdmF1bHRfYXNzZXQJd2hpdGVsaXN0DWFsZ29fZGVwb3NpdHMFYWRtaW4EFR98dTEYQAAIKiJnJwUyCWcxG0EAVTEZFEQxGESCCgTf1fahBPlEY8cENd1SlwRdrabNBNpbuLIEEFC0UAQj8L0CBHZNoeEE5dCvHwQCvs4RNhoAjgoACQAgAEIAdQCvAPEBOQGSAcUB8AAxGRQxGBQQQzYaAUkVJBJEFzEAIicFZUQSRCpMZyNDNhoBSRWBIBJENhoCSRUjEkQxACInBWVEEkQrTwJQTL8jQzEWIwlJOBAjEkRJOAcyChJESTgAMQASRCcEMQBQvkwXIkxPAk1MOAgIJwQxAFBMFr8jQzEWIwlJOBAlEkRJOBQyChJESTgAMQASREk4ESIqZUQSRCgxAFC+TBciTE8CTUw4EggoMQBQTBa/I0M2GgFJFSQSRCsxAFC+KU4CTSkTRCcEMQBQvkwXIkxPAk1MF0oPRExLAQknBDEAUEwWv7ExALIHsggjshAisgGzI0M2GgFJFSQSRCsxAFC+KU4CTSkTRCgxAFC+TBciTE8CTUwXSg9ETEsBCSgxAFBMFr+xIiplRDEATwKyErIUshElshAisgGzI0M2GgFJFYEgEkQ2GgJJFSQSRCsxAFC+KU4CTSkTRCtLAlC+KU4CTSkTRCgyClC+TBciTE8CTUwXSg9ETEsBCSgyClBMFr+xIiplRLIRshKyFCWyECKyAbMjQzEWIwlJOBAlEkRJOBEiKmVEEkRJOBQyChJEKDEAUL5MFyJMTwJNTDgSCCgxAFBMFr8jQzYaAUkVgSASRCcESwFQvkwXIkxPAk0oTwJQvkwXIkxPAk0IFicGTFCwI0M2GgFJIlmBAghLARUSRFcCAIAHSGVsbG8sIExQSRUWVwYCTFAnBkxQsCND","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Vaultlending contract
 */
export type VaultlendingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'set_vault_asset(uint64)void': {
      asset: bigint | number
    }
    'whitelist_account(address,bool)void': {
      account: string
      allowed: boolean
    }
    'deposit_algo(pay)void': {
      payment: AppMethodCallTransactionArgument
    }
    'deposit_asset(axfer)void': {
      assetTxn: AppMethodCallTransactionArgument
    }
    'withdraw_algo(uint64)void': {
      amount: bigint | number
    }
    'withdraw_asset(uint64)void': {
      amount: bigint | number
    }
    'borrow_to_merchant(address,uint64)void': {
      merchant: string
      amount: bigint | number
    }
    'repay_loan(axfer)void': {
      assetTxn: AppMethodCallTransactionArgument
    }
    'get_balance(address)uint64': {
      account: string
    }
    'hello(string)string': {
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'set_vault_asset(uint64)void': [asset: bigint | number]
    'whitelist_account(address,bool)void': [account: string, allowed: boolean]
    'deposit_algo(pay)void': [payment: AppMethodCallTransactionArgument]
    'deposit_asset(axfer)void': [assetTxn: AppMethodCallTransactionArgument]
    'withdraw_algo(uint64)void': [amount: bigint | number]
    'withdraw_asset(uint64)void': [amount: bigint | number]
    'borrow_to_merchant(address,uint64)void': [merchant: string, amount: bigint | number]
    'repay_loan(axfer)void': [assetTxn: AppMethodCallTransactionArgument]
    'get_balance(address)uint64': [account: string]
    'hello(string)string': [name: string]
  }
}

/**
 * The return type for each method
 */
export type VaultlendingReturns = {
  'set_vault_asset(uint64)void': void
  'whitelist_account(address,bool)void': void
  'deposit_algo(pay)void': void
  'deposit_asset(axfer)void': void
  'withdraw_algo(uint64)void': void
  'withdraw_asset(uint64)void': void
  'borrow_to_merchant(address,uint64)void': void
  'repay_loan(axfer)void': void
  'get_balance(address)uint64': bigint
  'hello(string)string': string
}

/**
 * Defines the types of available calls and state of the Vaultlending smart contract.
 */
export type VaultlendingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'set_vault_asset(uint64)void' | 'set_vault_asset', {
      argsObj: VaultlendingArgs['obj']['set_vault_asset(uint64)void']
      argsTuple: VaultlendingArgs['tuple']['set_vault_asset(uint64)void']
      returns: VaultlendingReturns['set_vault_asset(uint64)void']
    }>
    & Record<'whitelist_account(address,bool)void' | 'whitelist_account', {
      argsObj: VaultlendingArgs['obj']['whitelist_account(address,bool)void']
      argsTuple: VaultlendingArgs['tuple']['whitelist_account(address,bool)void']
      returns: VaultlendingReturns['whitelist_account(address,bool)void']
    }>
    & Record<'deposit_algo(pay)void' | 'deposit_algo', {
      argsObj: VaultlendingArgs['obj']['deposit_algo(pay)void']
      argsTuple: VaultlendingArgs['tuple']['deposit_algo(pay)void']
      returns: VaultlendingReturns['deposit_algo(pay)void']
    }>
    & Record<'deposit_asset(axfer)void' | 'deposit_asset', {
      argsObj: VaultlendingArgs['obj']['deposit_asset(axfer)void']
      argsTuple: VaultlendingArgs['tuple']['deposit_asset(axfer)void']
      returns: VaultlendingReturns['deposit_asset(axfer)void']
    }>
    & Record<'withdraw_algo(uint64)void' | 'withdraw_algo', {
      argsObj: VaultlendingArgs['obj']['withdraw_algo(uint64)void']
      argsTuple: VaultlendingArgs['tuple']['withdraw_algo(uint64)void']
      returns: VaultlendingReturns['withdraw_algo(uint64)void']
    }>
    & Record<'withdraw_asset(uint64)void' | 'withdraw_asset', {
      argsObj: VaultlendingArgs['obj']['withdraw_asset(uint64)void']
      argsTuple: VaultlendingArgs['tuple']['withdraw_asset(uint64)void']
      returns: VaultlendingReturns['withdraw_asset(uint64)void']
    }>
    & Record<'borrow_to_merchant(address,uint64)void' | 'borrow_to_merchant', {
      argsObj: VaultlendingArgs['obj']['borrow_to_merchant(address,uint64)void']
      argsTuple: VaultlendingArgs['tuple']['borrow_to_merchant(address,uint64)void']
      returns: VaultlendingReturns['borrow_to_merchant(address,uint64)void']
    }>
    & Record<'repay_loan(axfer)void' | 'repay_loan', {
      argsObj: VaultlendingArgs['obj']['repay_loan(axfer)void']
      argsTuple: VaultlendingArgs['tuple']['repay_loan(axfer)void']
      returns: VaultlendingReturns['repay_loan(axfer)void']
    }>
    & Record<'get_balance(address)uint64' | 'get_balance', {
      argsObj: VaultlendingArgs['obj']['get_balance(address)uint64']
      argsTuple: VaultlendingArgs['tuple']['get_balance(address)uint64']
      returns: VaultlendingReturns['get_balance(address)uint64']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: VaultlendingArgs['obj']['hello(string)string']
      argsTuple: VaultlendingArgs['tuple']['hello(string)string']
      returns: VaultlendingReturns['hello(string)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        vaultAsset: bigint
        admin: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        algoDeposits: Map<string, bigint>
        assetDeposits: Map<string, bigint>
        whitelist: Map<string, boolean>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type VaultlendingSignatures = keyof VaultlendingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type VaultlendingNonVoidMethodSignatures = keyof VaultlendingTypes['methods'] extends infer T ? T extends keyof VaultlendingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Vaultlending smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends VaultlendingSignatures> = VaultlendingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Vaultlending smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VaultlendingSignatures> = VaultlendingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = VaultlendingTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = VaultlendingTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type VaultlendingCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type VaultlendingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: VaultlendingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Vaultlending smart contract
 */
export abstract class VaultlendingParamsFactory {
  /**
   * Constructs a no op call for the set_vault_asset(uint64)void ABI method
   *
   * Admin chooses which ASA (like USDC) the vault uses.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setVaultAsset(params: CallParams<VaultlendingArgs['obj']['set_vault_asset(uint64)void'] | VaultlendingArgs['tuple']['set_vault_asset(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_vault_asset(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the whitelist_account(address,bool)void ABI method
   *
   * Admin whitelists an account for withdraw/borrow.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static whitelistAccount(params: CallParams<VaultlendingArgs['obj']['whitelist_account(address,bool)void'] | VaultlendingArgs['tuple']['whitelist_account(address,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'whitelist_account(address,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account, params.args.allowed],
    }
  }
  /**
   * Constructs a no op call for the deposit_algo(pay)void ABI method
   *
   * Deposit ALGO into vault.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositAlgo(params: CallParams<VaultlendingArgs['obj']['deposit_algo(pay)void'] | VaultlendingArgs['tuple']['deposit_algo(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit_algo(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the deposit_asset(axfer)void ABI method
   *
   * Deposit USDC (or ASA) into vault.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositAsset(params: CallParams<VaultlendingArgs['obj']['deposit_asset(axfer)void'] | VaultlendingArgs['tuple']['deposit_asset(axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit_asset(axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTxn],
    }
  }
  /**
   * Constructs a no op call for the withdraw_algo(uint64)void ABI method
   *
   * Withdraw ALGO from vault (only if whitelisted).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAlgo(params: CallParams<VaultlendingArgs['obj']['withdraw_algo(uint64)void'] | VaultlendingArgs['tuple']['withdraw_algo(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_algo(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the withdraw_asset(uint64)void ABI method
   *
   * Withdraw USDC/ASA from vault (only if whitelisted).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAsset(params: CallParams<VaultlendingArgs['obj']['withdraw_asset(uint64)void'] | VaultlendingArgs['tuple']['withdraw_asset(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_asset(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the borrow_to_merchant(address,uint64)void ABI method
   *
   * Credit officer borrows from vault and transfers to merchant.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static borrowToMerchant(params: CallParams<VaultlendingArgs['obj']['borrow_to_merchant(address,uint64)void'] | VaultlendingArgs['tuple']['borrow_to_merchant(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'borrow_to_merchant(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.merchant, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the repay_loan(axfer)void ABI method
   *
   * Borrower repays loan in vault asset (e.g., USDC).
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static repayLoan(params: CallParams<VaultlendingArgs['obj']['repay_loan(axfer)void'] | VaultlendingArgs['tuple']['repay_loan(axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'repay_loan(axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTxn],
    }
  }
  /**
   * Constructs a no op call for the get_balance(address)uint64 ABI method
   *
   * Return combined ALGO + asset balance.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBalance(params: CallParams<VaultlendingArgs['obj']['get_balance(address)uint64'] | VaultlendingArgs['tuple']['get_balance(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_balance(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * Simple test method.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<VaultlendingArgs['obj']['hello(string)string'] | VaultlendingArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Vaultlending smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class VaultlendingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `VaultlendingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new VaultlendingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new VaultlendingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Vaultlending smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: VaultlendingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new VaultlendingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Vaultlending smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Vaultlending smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Vaultlending smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new VaultlendingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Vaultlending smart contract
 */
export class VaultlendingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `VaultlendingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Vaultlending app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `VaultlendingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends VaultlendingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `VaultlendingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<VaultlendingClient> {
    return new VaultlendingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `VaultlendingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<VaultlendingClient> {
    return new VaultlendingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Vaultlending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `set_vault_asset(uint64)void` ABI method.
     *
     * Admin chooses which ASA (like USDC) the vault uses.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setVaultAsset: (params: CallParams<VaultlendingArgs['obj']['set_vault_asset(uint64)void'] | VaultlendingArgs['tuple']['set_vault_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.setVaultAsset(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `whitelist_account(address,bool)void` ABI method.
     *
     * Admin whitelists an account for withdraw/borrow.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    whitelistAccount: (params: CallParams<VaultlendingArgs['obj']['whitelist_account(address,bool)void'] | VaultlendingArgs['tuple']['whitelist_account(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.whitelistAccount(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `deposit_algo(pay)void` ABI method.
     *
     * Deposit ALGO into vault.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositAlgo: (params: CallParams<VaultlendingArgs['obj']['deposit_algo(pay)void'] | VaultlendingArgs['tuple']['deposit_algo(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.depositAlgo(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `deposit_asset(axfer)void` ABI method.
     *
     * Deposit USDC (or ASA) into vault.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositAsset: (params: CallParams<VaultlendingArgs['obj']['deposit_asset(axfer)void'] | VaultlendingArgs['tuple']['deposit_asset(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.depositAsset(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `withdraw_algo(uint64)void` ABI method.
     *
     * Withdraw ALGO from vault (only if whitelisted).
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAlgo: (params: CallParams<VaultlendingArgs['obj']['withdraw_algo(uint64)void'] | VaultlendingArgs['tuple']['withdraw_algo(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.withdrawAlgo(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `withdraw_asset(uint64)void` ABI method.
     *
     * Withdraw USDC/ASA from vault (only if whitelisted).
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAsset: (params: CallParams<VaultlendingArgs['obj']['withdraw_asset(uint64)void'] | VaultlendingArgs['tuple']['withdraw_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.withdrawAsset(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `borrow_to_merchant(address,uint64)void` ABI method.
     *
     * Credit officer borrows from vault and transfers to merchant.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    borrowToMerchant: (params: CallParams<VaultlendingArgs['obj']['borrow_to_merchant(address,uint64)void'] | VaultlendingArgs['tuple']['borrow_to_merchant(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.borrowToMerchant(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `repay_loan(axfer)void` ABI method.
     *
     * Borrower repays loan in vault asset (e.g., USDC).
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    repayLoan: (params: CallParams<VaultlendingArgs['obj']['repay_loan(axfer)void'] | VaultlendingArgs['tuple']['repay_loan(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.repayLoan(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `get_balance(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return combined ALGO + asset balance.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBalance: (params: CallParams<VaultlendingArgs['obj']['get_balance(address)uint64'] | VaultlendingArgs['tuple']['get_balance(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.getBalance(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `hello(string)string` ABI method.
     *
     * Simple test method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<VaultlendingArgs['obj']['hello(string)string'] | VaultlendingArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultlendingParamsFactory.hello(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Vaultlending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `set_vault_asset(uint64)void` ABI method.
     *
     * Admin chooses which ASA (like USDC) the vault uses.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setVaultAsset: (params: CallParams<VaultlendingArgs['obj']['set_vault_asset(uint64)void'] | VaultlendingArgs['tuple']['set_vault_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.setVaultAsset(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `whitelist_account(address,bool)void` ABI method.
     *
     * Admin whitelists an account for withdraw/borrow.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    whitelistAccount: (params: CallParams<VaultlendingArgs['obj']['whitelist_account(address,bool)void'] | VaultlendingArgs['tuple']['whitelist_account(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.whitelistAccount(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `deposit_algo(pay)void` ABI method.
     *
     * Deposit ALGO into vault.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositAlgo: (params: CallParams<VaultlendingArgs['obj']['deposit_algo(pay)void'] | VaultlendingArgs['tuple']['deposit_algo(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.depositAlgo(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `deposit_asset(axfer)void` ABI method.
     *
     * Deposit USDC (or ASA) into vault.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositAsset: (params: CallParams<VaultlendingArgs['obj']['deposit_asset(axfer)void'] | VaultlendingArgs['tuple']['deposit_asset(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.depositAsset(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `withdraw_algo(uint64)void` ABI method.
     *
     * Withdraw ALGO from vault (only if whitelisted).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAlgo: (params: CallParams<VaultlendingArgs['obj']['withdraw_algo(uint64)void'] | VaultlendingArgs['tuple']['withdraw_algo(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.withdrawAlgo(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `withdraw_asset(uint64)void` ABI method.
     *
     * Withdraw USDC/ASA from vault (only if whitelisted).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAsset: (params: CallParams<VaultlendingArgs['obj']['withdraw_asset(uint64)void'] | VaultlendingArgs['tuple']['withdraw_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.withdrawAsset(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `borrow_to_merchant(address,uint64)void` ABI method.
     *
     * Credit officer borrows from vault and transfers to merchant.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    borrowToMerchant: (params: CallParams<VaultlendingArgs['obj']['borrow_to_merchant(address,uint64)void'] | VaultlendingArgs['tuple']['borrow_to_merchant(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.borrowToMerchant(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `repay_loan(axfer)void` ABI method.
     *
     * Borrower repays loan in vault asset (e.g., USDC).
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    repayLoan: (params: CallParams<VaultlendingArgs['obj']['repay_loan(axfer)void'] | VaultlendingArgs['tuple']['repay_loan(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.repayLoan(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `get_balance(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return combined ALGO + asset balance.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBalance: (params: CallParams<VaultlendingArgs['obj']['get_balance(address)uint64'] | VaultlendingArgs['tuple']['get_balance(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.getBalance(params))
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `hello(string)string` ABI method.
     *
     * Simple test method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<VaultlendingArgs['obj']['hello(string)string'] | VaultlendingArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultlendingParamsFactory.hello(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Vaultlending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `set_vault_asset(uint64)void` ABI method.
     *
     * Admin chooses which ASA (like USDC) the vault uses.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setVaultAsset: async (params: CallParams<VaultlendingArgs['obj']['set_vault_asset(uint64)void'] | VaultlendingArgs['tuple']['set_vault_asset(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.setVaultAsset(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['set_vault_asset(uint64)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `whitelist_account(address,bool)void` ABI method.
     *
     * Admin whitelists an account for withdraw/borrow.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    whitelistAccount: async (params: CallParams<VaultlendingArgs['obj']['whitelist_account(address,bool)void'] | VaultlendingArgs['tuple']['whitelist_account(address,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.whitelistAccount(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['whitelist_account(address,bool)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `deposit_algo(pay)void` ABI method.
     *
     * Deposit ALGO into vault.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositAlgo: async (params: CallParams<VaultlendingArgs['obj']['deposit_algo(pay)void'] | VaultlendingArgs['tuple']['deposit_algo(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.depositAlgo(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['deposit_algo(pay)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `deposit_asset(axfer)void` ABI method.
     *
     * Deposit USDC (or ASA) into vault.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositAsset: async (params: CallParams<VaultlendingArgs['obj']['deposit_asset(axfer)void'] | VaultlendingArgs['tuple']['deposit_asset(axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.depositAsset(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['deposit_asset(axfer)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `withdraw_algo(uint64)void` ABI method.
     *
     * Withdraw ALGO from vault (only if whitelisted).
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAlgo: async (params: CallParams<VaultlendingArgs['obj']['withdraw_algo(uint64)void'] | VaultlendingArgs['tuple']['withdraw_algo(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.withdrawAlgo(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['withdraw_algo(uint64)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `withdraw_asset(uint64)void` ABI method.
     *
     * Withdraw USDC/ASA from vault (only if whitelisted).
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAsset: async (params: CallParams<VaultlendingArgs['obj']['withdraw_asset(uint64)void'] | VaultlendingArgs['tuple']['withdraw_asset(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.withdrawAsset(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['withdraw_asset(uint64)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `borrow_to_merchant(address,uint64)void` ABI method.
     *
     * Credit officer borrows from vault and transfers to merchant.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    borrowToMerchant: async (params: CallParams<VaultlendingArgs['obj']['borrow_to_merchant(address,uint64)void'] | VaultlendingArgs['tuple']['borrow_to_merchant(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.borrowToMerchant(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['borrow_to_merchant(address,uint64)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `repay_loan(axfer)void` ABI method.
     *
     * Borrower repays loan in vault asset (e.g., USDC).
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    repayLoan: async (params: CallParams<VaultlendingArgs['obj']['repay_loan(axfer)void'] | VaultlendingArgs['tuple']['repay_loan(axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.repayLoan(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['repay_loan(axfer)void'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `get_balance(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return combined ALGO + asset balance.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBalance: async (params: CallParams<VaultlendingArgs['obj']['get_balance(address)uint64'] | VaultlendingArgs['tuple']['get_balance(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.getBalance(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['get_balance(address)uint64'])}
    },

    /**
     * Makes a call to the Vaultlending smart contract using the `hello(string)string` ABI method.
     *
     * Simple test method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<VaultlendingArgs['obj']['hello(string)string'] | VaultlendingArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultlendingParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | VaultlendingReturns['hello(string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new VaultlendingClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Vaultlending smart contract using the `get_balance(address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Return combined ALGO + asset balance.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getBalance(params: CallParams<VaultlendingArgs['obj']['get_balance(address)uint64'] | VaultlendingArgs['tuple']['get_balance(address)uint64']>) {
    const result = await this.appClient.send.call(VaultlendingParamsFactory.getBalance(params))
    return result.return as unknown as VaultlendingReturns['get_balance(address)uint64']
  }

  /**
   * Methods to access state for the current Vaultlending app
   */
  state = {
    /**
     * Methods to access global state for the current Vaultlending app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          vaultAsset: result.vault_asset,
          admin: result.admin,
        }
      },
      /**
       * Get the current value of the vault_asset key in global state
       */
      vaultAsset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("vault_asset")) as bigint | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Vaultlending app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the algo_deposits map in box state
       */
      algoDeposits: {
        /**
         * Get all current values of the algo_deposits map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("algo_deposits")) as Map<string, bigint> },
        /**
         * Get a current value of the algo_deposits map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("algo_deposits", key) as bigint | undefined },
      },
      /**
       * Get values from the asset_deposits map in box state
       */
      assetDeposits: {
        /**
         * Get all current values of the asset_deposits map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("asset_deposits")) as Map<string, bigint> },
        /**
         * Get a current value of the asset_deposits map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("asset_deposits", key) as bigint | undefined },
      },
      /**
       * Get values from the whitelist map in box state
       */
      whitelist: {
        /**
         * Get all current values of the whitelist map in box state
         */
        getMap: async (): Promise<Map<string, boolean>> => { return (await this.appClient.state.box.getMap("whitelist")) as Map<string, boolean> },
        /**
         * Get a current value of the whitelist map by key from box state
         */
        value: async (key: string): Promise<boolean | undefined> => { return await this.appClient.state.box.getMapValue("whitelist", key) as boolean | undefined },
      },
    },
  }

  public newGroup(): VaultlendingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_vault_asset(uint64)void method call against the Vaultlending contract
       */
      setVaultAsset(params: CallParams<VaultlendingArgs['obj']['set_vault_asset(uint64)void'] | VaultlendingArgs['tuple']['set_vault_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setVaultAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a whitelist_account(address,bool)void method call against the Vaultlending contract
       */
      whitelistAccount(params: CallParams<VaultlendingArgs['obj']['whitelist_account(address,bool)void'] | VaultlendingArgs['tuple']['whitelist_account(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.whitelistAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deposit_algo(pay)void method call against the Vaultlending contract
       */
      depositAlgo(params: CallParams<VaultlendingArgs['obj']['deposit_algo(pay)void'] | VaultlendingArgs['tuple']['deposit_algo(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deposit_asset(axfer)void method call against the Vaultlending contract
       */
      depositAsset(params: CallParams<VaultlendingArgs['obj']['deposit_asset(axfer)void'] | VaultlendingArgs['tuple']['deposit_asset(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_algo(uint64)void method call against the Vaultlending contract
       */
      withdrawAlgo(params: CallParams<VaultlendingArgs['obj']['withdraw_algo(uint64)void'] | VaultlendingArgs['tuple']['withdraw_algo(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_asset(uint64)void method call against the Vaultlending contract
       */
      withdrawAsset(params: CallParams<VaultlendingArgs['obj']['withdraw_asset(uint64)void'] | VaultlendingArgs['tuple']['withdraw_asset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a borrow_to_merchant(address,uint64)void method call against the Vaultlending contract
       */
      borrowToMerchant(params: CallParams<VaultlendingArgs['obj']['borrow_to_merchant(address,uint64)void'] | VaultlendingArgs['tuple']['borrow_to_merchant(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.borrowToMerchant(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a repay_loan(axfer)void method call against the Vaultlending contract
       */
      repayLoan(params: CallParams<VaultlendingArgs['obj']['repay_loan(axfer)void'] | VaultlendingArgs['tuple']['repay_loan(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.repayLoan(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_balance(address)uint64 method call against the Vaultlending contract
       */
      getBalance(params: CallParams<VaultlendingArgs['obj']['get_balance(address)uint64'] | VaultlendingArgs['tuple']['get_balance(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_balance(address)uint64', v))
        return this
      },
      /**
       * Add a hello(string)string method call against the Vaultlending contract
       */
      hello(params: CallParams<VaultlendingArgs['obj']['hello(string)string'] | VaultlendingArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a clear state call to the Vaultlending contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as VaultlendingComposer
  }
}
export type VaultlendingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_vault_asset(uint64)void ABI method.
   *
   * Admin chooses which ASA (like USDC) the vault uses.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVaultAsset(params?: CallParams<VaultlendingArgs['obj']['set_vault_asset(uint64)void'] | VaultlendingArgs['tuple']['set_vault_asset(uint64)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['set_vault_asset(uint64)void'] | undefined]>

  /**
   * Calls the whitelist_account(address,bool)void ABI method.
   *
   * Admin whitelists an account for withdraw/borrow.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  whitelistAccount(params?: CallParams<VaultlendingArgs['obj']['whitelist_account(address,bool)void'] | VaultlendingArgs['tuple']['whitelist_account(address,bool)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['whitelist_account(address,bool)void'] | undefined]>

  /**
   * Calls the deposit_algo(pay)void ABI method.
   *
   * Deposit ALGO into vault.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositAlgo(params?: CallParams<VaultlendingArgs['obj']['deposit_algo(pay)void'] | VaultlendingArgs['tuple']['deposit_algo(pay)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['deposit_algo(pay)void'] | undefined]>

  /**
   * Calls the deposit_asset(axfer)void ABI method.
   *
   * Deposit USDC (or ASA) into vault.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositAsset(params?: CallParams<VaultlendingArgs['obj']['deposit_asset(axfer)void'] | VaultlendingArgs['tuple']['deposit_asset(axfer)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['deposit_asset(axfer)void'] | undefined]>

  /**
   * Calls the withdraw_algo(uint64)void ABI method.
   *
   * Withdraw ALGO from vault (only if whitelisted).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAlgo(params?: CallParams<VaultlendingArgs['obj']['withdraw_algo(uint64)void'] | VaultlendingArgs['tuple']['withdraw_algo(uint64)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['withdraw_algo(uint64)void'] | undefined]>

  /**
   * Calls the withdraw_asset(uint64)void ABI method.
   *
   * Withdraw USDC/ASA from vault (only if whitelisted).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAsset(params?: CallParams<VaultlendingArgs['obj']['withdraw_asset(uint64)void'] | VaultlendingArgs['tuple']['withdraw_asset(uint64)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['withdraw_asset(uint64)void'] | undefined]>

  /**
   * Calls the borrow_to_merchant(address,uint64)void ABI method.
   *
   * Credit officer borrows from vault and transfers to merchant.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrowToMerchant(params?: CallParams<VaultlendingArgs['obj']['borrow_to_merchant(address,uint64)void'] | VaultlendingArgs['tuple']['borrow_to_merchant(address,uint64)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['borrow_to_merchant(address,uint64)void'] | undefined]>

  /**
   * Calls the repay_loan(axfer)void ABI method.
   *
   * Borrower repays loan in vault asset (e.g., USDC).
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  repayLoan(params?: CallParams<VaultlendingArgs['obj']['repay_loan(axfer)void'] | VaultlendingArgs['tuple']['repay_loan(axfer)void']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['repay_loan(axfer)void'] | undefined]>

  /**
   * Calls the get_balance(address)uint64 ABI method.
   *
   * Return combined ALGO + asset balance.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBalance(params?: CallParams<VaultlendingArgs['obj']['get_balance(address)uint64'] | VaultlendingArgs['tuple']['get_balance(address)uint64']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['get_balance(address)uint64'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * Simple test method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<VaultlendingArgs['obj']['hello(string)string'] | VaultlendingArgs['tuple']['hello(string)string']>): VaultlendingComposer<[...TReturns, VaultlendingReturns['hello(string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Vaultlending smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): VaultlendingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): VaultlendingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<VaultlendingComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<VaultlendingComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<VaultlendingComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<VaultlendingComposerResults<TReturns>>
}
export type VaultlendingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


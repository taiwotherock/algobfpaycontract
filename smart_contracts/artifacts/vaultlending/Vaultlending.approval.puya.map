{
  "version": 3,
  "sources": [
    "../../vaultlending/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBQ;AAAmB;AAAnB;AACA;;AAAa;;AAAb;AATR;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAaK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGU;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACA;AAAA;AAAA;AAJH;AAAA;AAMA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGU;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACA;AAAA;;AAAA;AAAA;AAAA;AAJH;AAAA;AAQA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGU;AAAA;;AAAoB;;AAApB;AAAP;AACO;AAAA;;AAAkB;;AAAlB;AAAP;AAEU;;AAAuB;;AAAvB;AAAA;AAAA;AAAA;AAA2C;AAA3C;AAAA;;AAAA;AACiC;AAAA;;AAAV;AAAjC;;AAAmB;;AAAnB;AAAA;AAAA;AAAA;AAPH;AAAA;AASA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGU;AAAA;;AAA4B;;AAA5B;AAAP;AACO;AAAA;;AAAoB;;AAApB;AAAP;AACO;AAAA;;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAP;AAEU;AAAwB;;AAAxB;AAAA;AAAA;AAAA;AAA4C;AAA5C;AAAA;;AAAA;AACkC;AAAA;;AAAV;AAAlC;AAAoB;;AAApB;AAAA;AAAA;AAAA;AARH;AAAA;AAYA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGU;AAAmB;;AAAnB;AAAA;AAAuC;AAAvC;;AAAA;AAAuC;AAAvC;AAAP;AAEU;;AAAuB;;AAAvB;AAAA;AAAA;AAAA;AAA2C;AAA3C;AAAA;;AAAA;AACQ;AAAA;AAAX;AAAA;AAAP;AAEiC;AAAA;;AAAA;AAAjC;;AAAmB;;AAAnB;AAAA;AAAA;AAAA;AAEA;AACa;;;;;;AADb;;;AAAA;;;AAAA;AAVH;AAAA;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGU;AAAmB;;AAAnB;AAAA;AAAuC;AAAvC;;AAAA;AAAuC;AAAvC;AAAP;AAEU;AAAwB;;AAAxB;AAAA;AAAA;AAAA;AAA4C;AAA5C;AAAA;;AAAA;AACQ;AAAA;AAAX;AAAA;AAAP;AAEkC;AAAA;;AAAA;AAAlC;AAAoB;;AAApB;AAAA;AAAA;AAAA;AAEA;AACe;AAAA;AAAA;AAAA;AACI;;;;;;;;;;AAFnB;;;AAAA;;;AAAA;AAVH;AAAA;AAkBA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOU;AAAmB;;AAAnB;AAAA;AAAuC;AAAvC;;AAAA;AAAuC;AAAvC;AAAP;AACO;AAAA;;AAAA;AAAA;AADuC;AACvC;;AAAA;AADuC;AACvC;AAAP;AAEgB;AAAwB;;AAAxB;AAAA;AAAA;AAAA;AAAoE;AAApE;AAAA;;AAAA;AACQ;AAAA;AAAjB;AAAA;AAAP;AAG0D;AAAA;;AAAA;AAA1D;AAAoB;;AAApB;AAAA;AAAA;AAAA;AAEA;AACe;AAAA;AAAA;AAAA;;;;;;;AADf;;;AAAA;;;AAAA;AAhBH;AAAA;AAsBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGU;AAAA;;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAP;AACO;AAAA;;AAA4B;;AAA5B;AAAP;AAEU;AAAwB;;AAAxB;AAAA;AAAA;AAAA;AAA4C;AAA5C;AAAA;;AAAA;AACkC;AAAA;;AAAV;AAAlC;AAAoB;;AAApB;AAAA;AAAA;AAAA;AAPH;AAAA;AAWA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGkB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAwC;AAAxC;AAAA;;AAAA;AACC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyC;AAAzC;AAAA;;AAAA;AACG;AAAZ;AALV;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAGU;;;;;;;;;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 4"
    },
    "7": {
      "op": "bytecblock \"asset_deposits\" 0x00 \"vault_asset\" \"whitelist\" \"algo_deposits\" \"admin\" 0x151f7c75"
    },
    "73": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "75": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "78": {
      "op": "bytec_2 // \"vault_asset\"",
      "defined_out": [
        "\"vault_asset\""
      ],
      "stack_out": [
        "\"vault_asset\""
      ]
    },
    "79": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"vault_asset\"",
        "0"
      ],
      "stack_out": [
        "\"vault_asset\"",
        "0"
      ]
    },
    "80": {
      "op": "app_global_put",
      "stack_out": []
    },
    "81": {
      "op": "bytec 5 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "83": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"admin\"",
        "tmp%0#2"
      ],
      "stack_out": [
        "\"admin\"",
        "tmp%0#2"
      ]
    },
    "85": {
      "op": "app_global_put",
      "stack_out": []
    },
    "86": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "88": {
      "op": "bz main___algopy_default_create@19",
      "stack_out": []
    },
    "91": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "94": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "97": {
      "op": "assert",
      "stack_out": []
    },
    "98": {
      "op": "pushbytess 0xdfd5f6a1 0xf94463c7 0x35dd5297 0x5dada6cd 0xda5bb8b2 0x1050b450 0x23f0bd02 0x764da1e1 0xe5d0af1f 0x02bece11 // method \"set_vault_asset(uint64)void\", method \"whitelist_account(address,bool)void\", method \"deposit_algo(pay)void\", method \"deposit_asset(axfer)void\", method \"withdraw_algo(uint64)void\", method \"withdraw_asset(uint64)void\", method \"borrow_to_merchant(address,uint64)void\", method \"repay_loan(axfer)void\", method \"get_balance(address)uint64\", method \"hello(string)string\"",
      "defined_out": [
        "Method(borrow_to_merchant(address,uint64)void)",
        "Method(deposit_algo(pay)void)",
        "Method(deposit_asset(axfer)void)",
        "Method(get_balance(address)uint64)",
        "Method(hello(string)string)",
        "Method(repay_loan(axfer)void)",
        "Method(set_vault_asset(uint64)void)",
        "Method(whitelist_account(address,bool)void)",
        "Method(withdraw_algo(uint64)void)",
        "Method(withdraw_asset(uint64)void)"
      ],
      "stack_out": [
        "Method(set_vault_asset(uint64)void)",
        "Method(whitelist_account(address,bool)void)",
        "Method(deposit_algo(pay)void)",
        "Method(deposit_asset(axfer)void)",
        "Method(withdraw_algo(uint64)void)",
        "Method(withdraw_asset(uint64)void)",
        "Method(borrow_to_merchant(address,uint64)void)",
        "Method(repay_loan(axfer)void)",
        "Method(get_balance(address)uint64)",
        "Method(hello(string)string)"
      ]
    },
    "150": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(borrow_to_merchant(address,uint64)void)",
        "Method(deposit_algo(pay)void)",
        "Method(deposit_asset(axfer)void)",
        "Method(get_balance(address)uint64)",
        "Method(hello(string)string)",
        "Method(repay_loan(axfer)void)",
        "Method(set_vault_asset(uint64)void)",
        "Method(whitelist_account(address,bool)void)",
        "Method(withdraw_algo(uint64)void)",
        "Method(withdraw_asset(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(set_vault_asset(uint64)void)",
        "Method(whitelist_account(address,bool)void)",
        "Method(deposit_algo(pay)void)",
        "Method(deposit_asset(axfer)void)",
        "Method(withdraw_algo(uint64)void)",
        "Method(withdraw_asset(uint64)void)",
        "Method(borrow_to_merchant(address,uint64)void)",
        "Method(repay_loan(axfer)void)",
        "Method(get_balance(address)uint64)",
        "Method(hello(string)string)",
        "tmp%6#0"
      ]
    },
    "153": {
      "op": "match set_vault_asset whitelist_account deposit_algo deposit_asset withdraw_algo withdraw_asset borrow_to_merchant repay_loan get_balance hello",
      "stack_out": []
    },
    "175": {
      "op": "err"
    },
    "176": {
      "block": "main___algopy_default_create@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "178": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "179": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "181": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "182": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "183": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "184": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.set_vault_asset[routing]",
      "params": {},
      "block": "set_vault_asset",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "188": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "189": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "191": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "193": {
      "op": "txn Sender",
      "defined_out": [
        "asset#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset#0",
        "tmp%0#1"
      ]
    },
    "195": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset#0",
        "tmp%0#1",
        "0"
      ]
    },
    "196": {
      "op": "bytec 5 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "asset#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset#0",
        "tmp%0#1",
        "0",
        "\"admin\""
      ]
    },
    "198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "199": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "asset#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "asset#0",
        "tmp%1#1"
      ]
    },
    "201": {
      "error": "NOT_ADMIN",
      "op": "assert // NOT_ADMIN",
      "stack_out": [
        "asset#0"
      ]
    },
    "202": {
      "op": "bytec_2 // \"vault_asset\"",
      "defined_out": [
        "\"vault_asset\"",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "\"vault_asset\""
      ]
    },
    "203": {
      "op": "swap",
      "stack_out": [
        "\"vault_asset\"",
        "asset#0"
      ]
    },
    "204": {
      "op": "app_global_put",
      "stack_out": []
    },
    "205": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "206": {
      "op": "return",
      "stack_out": []
    },
    "207": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.whitelist_account[routing]",
      "params": {},
      "block": "whitelist_account",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "account#0"
      ],
      "stack_out": [
        "account#0"
      ]
    },
    "210": {
      "op": "dup",
      "defined_out": [
        "account#0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0",
        "account#0 (copy)"
      ]
    },
    "211": {
      "op": "len",
      "defined_out": [
        "account#0",
        "len%0#0"
      ],
      "stack_out": [
        "account#0",
        "len%0#0"
      ]
    },
    "212": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "account#0",
        "len%0#0"
      ],
      "stack_out": [
        "account#0",
        "len%0#0",
        "32"
      ]
    },
    "214": {
      "op": "==",
      "defined_out": [
        "account#0",
        "eq%0#0"
      ],
      "stack_out": [
        "account#0",
        "eq%0#0"
      ]
    },
    "215": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "account#0"
      ]
    },
    "216": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "account#0",
        "allowed#0"
      ],
      "stack_out": [
        "account#0",
        "allowed#0"
      ]
    },
    "219": {
      "op": "dup",
      "defined_out": [
        "account#0",
        "allowed#0",
        "allowed#0 (copy)"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "allowed#0 (copy)"
      ]
    },
    "220": {
      "op": "len",
      "defined_out": [
        "account#0",
        "allowed#0",
        "len%1#0"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "len%1#0"
      ]
    },
    "221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "account#0",
        "allowed#0",
        "len%1#0"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "len%1#0",
        "1"
      ]
    },
    "222": {
      "op": "==",
      "defined_out": [
        "account#0",
        "allowed#0",
        "eq%1#0"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "eq%1#0"
      ]
    },
    "223": {
      "error": "invalid number of bytes for bool8",
      "op": "assert // invalid number of bytes for bool8",
      "stack_out": [
        "account#0",
        "allowed#0"
      ]
    },
    "224": {
      "op": "txn Sender",
      "defined_out": [
        "account#0",
        "allowed#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "tmp%0#1"
      ]
    },
    "226": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "account#0",
        "allowed#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "tmp%0#1",
        "0"
      ]
    },
    "227": {
      "op": "bytec 5 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "account#0",
        "allowed#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "tmp%0#1",
        "0",
        "\"admin\""
      ]
    },
    "229": {
      "op": "app_global_get_ex",
      "defined_out": [
        "account#0",
        "allowed#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "230": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "account#0",
        "allowed#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "231": {
      "op": "==",
      "defined_out": [
        "account#0",
        "allowed#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "tmp%1#1"
      ]
    },
    "232": {
      "error": "NOT_ADMIN",
      "op": "assert // NOT_ADMIN",
      "stack_out": [
        "account#0",
        "allowed#0"
      ]
    },
    "233": {
      "op": "bytec_3 // \"whitelist\"",
      "defined_out": [
        "\"whitelist\"",
        "account#0",
        "allowed#0"
      ],
      "stack_out": [
        "account#0",
        "allowed#0",
        "\"whitelist\""
      ]
    },
    "234": {
      "op": "uncover 2",
      "stack_out": [
        "allowed#0",
        "\"whitelist\"",
        "account#0"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "allowed#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "allowed#0",
        "box_prefixed_key%0#0"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "allowed#0"
      ]
    },
    "238": {
      "op": "box_put",
      "stack_out": []
    },
    "239": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "240": {
      "op": "return",
      "stack_out": []
    },
    "241": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.deposit_algo[routing]",
      "params": {},
      "block": "deposit_algo",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "243": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "244": {
      "op": "-",
      "defined_out": [
        "payment#0"
      ],
      "stack_out": [
        "payment#0"
      ]
    },
    "245": {
      "op": "dup",
      "defined_out": [
        "payment#0",
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0",
        "payment#0 (copy)"
      ]
    },
    "246": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "gtxn_type%0#0"
      ]
    },
    "248": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "249": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "250": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "payment#0"
      ]
    },
    "251": {
      "op": "dup",
      "stack_out": [
        "payment#0",
        "payment#0 (copy)"
      ]
    },
    "252": {
      "op": "gtxns Receiver",
      "defined_out": [
        "payment#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "payment#0",
        "tmp%0#1"
      ]
    },
    "254": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "payment#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "payment#0",
        "tmp%0#1",
        "tmp%1#0"
      ]
    },
    "256": {
      "op": "==",
      "defined_out": [
        "payment#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "payment#0",
        "tmp%2#0"
      ]
    },
    "257": {
      "error": "WRONG_RECEIVER",
      "op": "assert // WRONG_RECEIVER",
      "stack_out": [
        "payment#0"
      ]
    },
    "258": {
      "op": "dup",
      "stack_out": [
        "payment#0",
        "payment#0 (copy)"
      ]
    },
    "259": {
      "op": "gtxns Sender",
      "defined_out": [
        "payment#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "payment#0",
        "tmp%3#0"
      ]
    },
    "261": {
      "op": "txn Sender",
      "defined_out": [
        "payment#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "payment#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "payment#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "payment#0",
        "tmp%5#0"
      ]
    },
    "264": {
      "error": "SENDER_MISMATCH",
      "op": "assert // SENDER_MISMATCH",
      "stack_out": [
        "payment#0"
      ]
    },
    "265": {
      "op": "bytec 4 // \"algo_deposits\"",
      "defined_out": [
        "\"algo_deposits\"",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "\"algo_deposits\""
      ]
    },
    "267": {
      "op": "txn Sender",
      "defined_out": [
        "\"algo_deposits\"",
        "materialized_values%0#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "\"algo_deposits\"",
        "materialized_values%0#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "box_prefixed_key%0#0"
      ]
    },
    "270": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "271": {
      "op": "swap",
      "stack_out": [
        "payment#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "272": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "273": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "0"
      ]
    },
    "274": {
      "op": "swap",
      "stack_out": [
        "payment#0",
        "maybe_exists%0#0",
        "0",
        "maybe_value_converted%0#0"
      ]
    },
    "275": {
      "op": "uncover 2",
      "stack_out": [
        "payment#0",
        "0",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "277": {
      "op": "select",
      "defined_out": [
        "current#0",
        "payment#0"
      ],
      "stack_out": [
        "payment#0",
        "current#0"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "payment#0"
      ]
    },
    "279": {
      "op": "gtxns Amount",
      "defined_out": [
        "current#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%6#0"
      ]
    },
    "281": {
      "op": "+",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "282": {
      "op": "bytec 4 // \"algo_deposits\"",
      "stack_out": [
        "tmp%7#0",
        "\"algo_deposits\""
      ]
    },
    "284": {
      "op": "txn Sender",
      "defined_out": [
        "\"algo_deposits\"",
        "materialized_values%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "\"algo_deposits\"",
        "materialized_values%1#0"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "box_prefixed_key%1#0"
      ]
    },
    "287": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%1#0",
        "tmp%7#0"
      ]
    },
    "288": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ]
    },
    "289": {
      "op": "box_put",
      "stack_out": []
    },
    "290": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "291": {
      "op": "return",
      "stack_out": []
    },
    "292": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.deposit_asset[routing]",
      "params": {},
      "block": "deposit_asset",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "295": {
      "op": "-",
      "defined_out": [
        "asset_txn#0"
      ],
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "296": {
      "op": "dup",
      "defined_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ],
      "stack_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ]
    },
    "297": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset_txn#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "gtxn_type%0#0"
      ]
    },
    "299": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "asset_txn#0",
        "axfer",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "300": {
      "op": "==",
      "defined_out": [
        "asset_txn#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "301": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "302": {
      "op": "dup",
      "stack_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ]
    },
    "303": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset_txn#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%0#1"
      ]
    },
    "305": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_txn#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%0#1",
        "tmp%1#0"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "asset_txn#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%2#0"
      ]
    },
    "308": {
      "error": "WRONG_RECEIVER",
      "op": "assert // WRONG_RECEIVER",
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "309": {
      "op": "dup",
      "stack_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ]
    },
    "310": {
      "op": "gtxns Sender",
      "defined_out": [
        "asset_txn#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%3#0"
      ]
    },
    "312": {
      "op": "txn Sender",
      "defined_out": [
        "asset_txn#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "asset_txn#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%5#0"
      ]
    },
    "315": {
      "error": "SENDER_MISMATCH",
      "op": "assert // SENDER_MISMATCH",
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "316": {
      "op": "dup",
      "stack_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ]
    },
    "317": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset_txn#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%6#0"
      ]
    },
    "319": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_txn#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%6#0",
        "0"
      ]
    },
    "320": {
      "op": "bytec_2 // \"vault_asset\"",
      "defined_out": [
        "\"vault_asset\"",
        "0",
        "asset_txn#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%6#0",
        "0",
        "\"vault_asset\""
      ]
    },
    "321": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_txn#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "322": {
      "error": "check self.vault_asset exists",
      "op": "assert // check self.vault_asset exists",
      "stack_out": [
        "asset_txn#0",
        "tmp%6#0",
        "maybe_value%0#0"
      ]
    },
    "323": {
      "op": "==",
      "defined_out": [
        "asset_txn#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%7#0"
      ]
    },
    "324": {
      "error": "INVALID_ASSET",
      "op": "assert // INVALID_ASSET",
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "325": {
      "op": "bytec_0 // \"asset_deposits\"",
      "defined_out": [
        "\"asset_deposits\"",
        "asset_txn#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "\"asset_deposits\""
      ]
    },
    "326": {
      "op": "txn Sender",
      "defined_out": [
        "\"asset_deposits\"",
        "asset_txn#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "\"asset_deposits\"",
        "materialized_values%0#0"
      ]
    },
    "328": {
      "op": "concat",
      "defined_out": [
        "asset_txn#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "box_prefixed_key%0#0"
      ]
    },
    "329": {
      "op": "box_get",
      "defined_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "330": {
      "op": "swap",
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "331": {
      "op": "btoi",
      "defined_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "332": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "0"
      ]
    },
    "333": {
      "op": "swap",
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "0",
        "maybe_value_converted%0#0"
      ]
    },
    "334": {
      "op": "uncover 2",
      "stack_out": [
        "asset_txn#0",
        "0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "336": {
      "op": "select",
      "defined_out": [
        "asset_txn#0",
        "current#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "current#0"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "asset_txn#0"
      ]
    },
    "338": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "current#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%8#0"
      ]
    },
    "340": {
      "op": "+",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "341": {
      "op": "bytec_0 // \"asset_deposits\"",
      "stack_out": [
        "tmp%9#0",
        "\"asset_deposits\""
      ]
    },
    "342": {
      "op": "txn Sender",
      "defined_out": [
        "\"asset_deposits\"",
        "materialized_values%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "\"asset_deposits\"",
        "materialized_values%1#0"
      ]
    },
    "344": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "box_prefixed_key%1#0"
      ]
    },
    "345": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%1#0",
        "tmp%9#0"
      ]
    },
    "346": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ]
    },
    "347": {
      "op": "box_put",
      "stack_out": []
    },
    "348": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "349": {
      "op": "return",
      "stack_out": []
    },
    "350": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.withdraw_algo[routing]",
      "params": {},
      "block": "withdraw_algo",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "amount#0"
      ]
    },
    "353": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0",
        "amount#0 (copy)"
      ]
    },
    "354": {
      "op": "len",
      "defined_out": [
        "amount#0",
        "len%0#0"
      ],
      "stack_out": [
        "amount#0",
        "len%0#0"
      ]
    },
    "355": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "amount#0",
        "len%0#0"
      ],
      "stack_out": [
        "amount#0",
        "len%0#0",
        "8"
      ]
    },
    "356": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "eq%0#0"
      ],
      "stack_out": [
        "amount#0",
        "eq%0#0"
      ]
    },
    "357": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "amount#0"
      ]
    },
    "358": {
      "op": "bytec_3 // \"whitelist\"",
      "defined_out": [
        "\"whitelist\"",
        "amount#0"
      ],
      "stack_out": [
        "amount#0",
        "\"whitelist\""
      ]
    },
    "359": {
      "op": "txn Sender",
      "defined_out": [
        "\"whitelist\"",
        "amount#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "amount#0",
        "\"whitelist\"",
        "materialized_values%0#0"
      ]
    },
    "361": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "amount#0",
        "box_prefixed_key%0#0"
      ]
    },
    "362": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "363": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "364": {
      "op": "cover 2",
      "stack_out": [
        "amount#0",
        "0x00",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "366": {
      "op": "select",
      "defined_out": [
        "amount#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "amount#0",
        "state_get%0#0"
      ]
    },
    "367": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "amount#0",
        "state_get%0#0",
        "0x00"
      ]
    },
    "368": {
      "op": "!=",
      "defined_out": [
        "amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "amount#0",
        "tmp%2#0"
      ]
    },
    "369": {
      "error": "NOT_WHITELISTED",
      "op": "assert // NOT_WHITELISTED",
      "stack_out": [
        "amount#0"
      ]
    },
    "370": {
      "op": "bytec 4 // \"algo_deposits\"",
      "defined_out": [
        "\"algo_deposits\"",
        "amount#0"
      ],
      "stack_out": [
        "amount#0",
        "\"algo_deposits\""
      ]
    },
    "372": {
      "op": "txn Sender",
      "defined_out": [
        "\"algo_deposits\"",
        "amount#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "amount#0",
        "\"algo_deposits\"",
        "materialized_values%1#0"
      ]
    },
    "374": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "amount#0",
        "box_prefixed_key%1#0"
      ]
    },
    "375": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "377": {
      "op": "btoi",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "0"
      ]
    },
    "379": {
      "op": "swap",
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "0",
        "maybe_value_converted%0#0"
      ]
    },
    "380": {
      "op": "uncover 2",
      "stack_out": [
        "amount#0",
        "0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "382": {
      "op": "select",
      "defined_out": [
        "amount#0",
        "current#0"
      ],
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "383": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "amount#0"
      ]
    },
    "384": {
      "op": "btoi",
      "defined_out": [
        "current#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%3#0"
      ]
    },
    "385": {
      "op": "dup2",
      "defined_out": [
        "current#0",
        "current#0 (copy)",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "tmp%3#0",
        "current#0 (copy)",
        "tmp%3#0 (copy)"
      ]
    },
    "386": {
      "op": ">=",
      "defined_out": [
        "current#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "387": {
      "error": "INSUFFICIENT_BALANCE",
      "op": "assert // INSUFFICIENT_BALANCE",
      "stack_out": [
        "current#0",
        "tmp%3#0"
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "current#0"
      ]
    },
    "389": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "current#0",
        "tmp%3#0 (copy)"
      ]
    },
    "391": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "392": {
      "op": "bytec 4 // \"algo_deposits\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"algo_deposits\""
      ]
    },
    "394": {
      "op": "txn Sender",
      "defined_out": [
        "\"algo_deposits\"",
        "materialized_values%2#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"algo_deposits\"",
        "materialized_values%2#0"
      ]
    },
    "396": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "box_prefixed_key%2#0"
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "box_prefixed_key%2#0",
        "tmp%6#0"
      ]
    },
    "398": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%2#0",
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "box_prefixed_key%2#0",
        "encoded_value%0#0"
      ]
    },
    "399": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "400": {
      "op": "itxn_begin"
    },
    "401": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "403": {
      "op": "itxn_field Receiver"
    },
    "405": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "407": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "408": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "411": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "413": {
      "op": "itxn_submit"
    },
    "414": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "415": {
      "op": "return",
      "stack_out": []
    },
    "416": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.withdraw_asset[routing]",
      "params": {},
      "block": "withdraw_asset",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "amount#0"
      ]
    },
    "419": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0",
        "amount#0 (copy)"
      ]
    },
    "420": {
      "op": "len",
      "defined_out": [
        "amount#0",
        "len%0#0"
      ],
      "stack_out": [
        "amount#0",
        "len%0#0"
      ]
    },
    "421": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "amount#0",
        "len%0#0"
      ],
      "stack_out": [
        "amount#0",
        "len%0#0",
        "8"
      ]
    },
    "422": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "eq%0#0"
      ],
      "stack_out": [
        "amount#0",
        "eq%0#0"
      ]
    },
    "423": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "amount#0"
      ]
    },
    "424": {
      "op": "bytec_3 // \"whitelist\"",
      "defined_out": [
        "\"whitelist\"",
        "amount#0"
      ],
      "stack_out": [
        "amount#0",
        "\"whitelist\""
      ]
    },
    "425": {
      "op": "txn Sender",
      "defined_out": [
        "\"whitelist\"",
        "amount#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "amount#0",
        "\"whitelist\"",
        "materialized_values%0#0"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "amount#0",
        "box_prefixed_key%0#0"
      ]
    },
    "428": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "429": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "430": {
      "op": "cover 2",
      "stack_out": [
        "amount#0",
        "0x00",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "432": {
      "op": "select",
      "defined_out": [
        "amount#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "amount#0",
        "state_get%0#0"
      ]
    },
    "433": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "amount#0",
        "state_get%0#0",
        "0x00"
      ]
    },
    "434": {
      "op": "!=",
      "defined_out": [
        "amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "amount#0",
        "tmp%2#0"
      ]
    },
    "435": {
      "error": "NOT_WHITELISTED",
      "op": "assert // NOT_WHITELISTED",
      "stack_out": [
        "amount#0"
      ]
    },
    "436": {
      "op": "bytec_0 // \"asset_deposits\"",
      "defined_out": [
        "\"asset_deposits\"",
        "amount#0"
      ],
      "stack_out": [
        "amount#0",
        "\"asset_deposits\""
      ]
    },
    "437": {
      "op": "txn Sender",
      "defined_out": [
        "\"asset_deposits\"",
        "amount#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "amount#0",
        "\"asset_deposits\"",
        "materialized_values%1#0"
      ]
    },
    "439": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "amount#0",
        "box_prefixed_key%1#0"
      ]
    },
    "440": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "442": {
      "op": "btoi",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "443": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "0"
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "amount#0",
        "maybe_exists%1#0",
        "0",
        "maybe_value_converted%0#0"
      ]
    },
    "445": {
      "op": "uncover 2",
      "stack_out": [
        "amount#0",
        "0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "447": {
      "op": "select",
      "defined_out": [
        "amount#0",
        "current#0"
      ],
      "stack_out": [
        "amount#0",
        "current#0"
      ]
    },
    "448": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "amount#0"
      ]
    },
    "449": {
      "op": "btoi",
      "defined_out": [
        "current#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%3#0"
      ]
    },
    "450": {
      "op": "dup2",
      "defined_out": [
        "current#0",
        "current#0 (copy)",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "current#0",
        "tmp%3#0",
        "current#0 (copy)",
        "tmp%3#0 (copy)"
      ]
    },
    "451": {
      "op": ">=",
      "defined_out": [
        "current#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "452": {
      "error": "INSUFFICIENT_BALANCE",
      "op": "assert // INSUFFICIENT_BALANCE",
      "stack_out": [
        "current#0",
        "tmp%3#0"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "current#0"
      ]
    },
    "454": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "current#0",
        "tmp%3#0 (copy)"
      ]
    },
    "456": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "457": {
      "op": "bytec_0 // \"asset_deposits\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"asset_deposits\""
      ]
    },
    "458": {
      "op": "txn Sender",
      "defined_out": [
        "\"asset_deposits\"",
        "materialized_values%2#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"asset_deposits\"",
        "materialized_values%2#0"
      ]
    },
    "460": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "box_prefixed_key%2#0"
      ]
    },
    "461": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "box_prefixed_key%2#0",
        "tmp%6#0"
      ]
    },
    "462": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%2#0",
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "box_prefixed_key%2#0",
        "encoded_value%0#0"
      ]
    },
    "463": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "464": {
      "op": "itxn_begin"
    },
    "465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "466": {
      "op": "bytec_2 // \"vault_asset\"",
      "defined_out": [
        "\"vault_asset\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"vault_asset\""
      ]
    },
    "467": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "468": {
      "error": "check self.vault_asset exists",
      "op": "assert // check self.vault_asset exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0"
      ]
    },
    "469": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "471": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0"
      ]
    },
    "473": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "475": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "477": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "479": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "480": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "483": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "485": {
      "op": "itxn_submit"
    },
    "486": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "487": {
      "op": "return",
      "stack_out": []
    },
    "488": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.borrow_to_merchant[routing]",
      "params": {},
      "block": "borrow_to_merchant",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0"
      ]
    },
    "491": {
      "op": "dup",
      "defined_out": [
        "merchant#0",
        "merchant#0 (copy)"
      ],
      "stack_out": [
        "merchant#0",
        "merchant#0 (copy)"
      ]
    },
    "492": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "len%0#0"
      ]
    },
    "493": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "len%0#0",
        "32"
      ]
    },
    "495": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "eq%0#0"
      ]
    },
    "496": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "merchant#0"
      ]
    },
    "497": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "amount#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0"
      ]
    },
    "500": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "amount#0 (copy)"
      ]
    },
    "501": {
      "op": "len",
      "defined_out": [
        "amount#0",
        "len%1#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "len%1#0"
      ]
    },
    "502": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "amount#0",
        "len%1#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "len%1#0",
        "8"
      ]
    },
    "503": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "eq%1#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "eq%1#0"
      ]
    },
    "504": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "merchant#0",
        "amount#0"
      ]
    },
    "505": {
      "op": "bytec_3 // \"whitelist\"",
      "defined_out": [
        "\"whitelist\"",
        "amount#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "\"whitelist\""
      ]
    },
    "506": {
      "op": "txn Sender",
      "defined_out": [
        "\"whitelist\"",
        "amount#0",
        "materialized_values%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "\"whitelist\"",
        "materialized_values%0#0"
      ]
    },
    "508": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "box_prefixed_key%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "box_prefixed_key%0#0"
      ]
    },
    "509": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "510": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "511": {
      "op": "cover 2",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "0x00",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "513": {
      "op": "select",
      "defined_out": [
        "amount#0",
        "merchant#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "state_get%0#0"
      ]
    },
    "514": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "state_get%0#0",
        "0x00"
      ]
    },
    "515": {
      "op": "!=",
      "defined_out": [
        "amount#0",
        "merchant#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "tmp%2#1"
      ]
    },
    "516": {
      "error": "CREDIT_OFFICER_NOT_WHITELISTED",
      "op": "assert // CREDIT_OFFICER_NOT_WHITELISTED",
      "stack_out": [
        "merchant#0",
        "amount#0"
      ]
    },
    "517": {
      "op": "bytec_3 // \"whitelist\"",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "\"whitelist\""
      ]
    },
    "518": {
      "op": "dig 2",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "\"whitelist\"",
        "merchant#0 (copy)"
      ]
    },
    "520": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "box_prefixed_key%1#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "box_prefixed_key%1#0"
      ]
    },
    "521": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "522": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00"
      ]
    },
    "523": {
      "op": "cover 2",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "0x00",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "525": {
      "op": "select",
      "defined_out": [
        "amount#0",
        "merchant#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "state_get%1#0"
      ]
    },
    "526": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "state_get%1#0",
        "0x00"
      ]
    },
    "527": {
      "op": "!=",
      "defined_out": [
        "amount#0",
        "merchant#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "tmp%5#0"
      ]
    },
    "528": {
      "error": "MERCHANT_NOT_WHITELISTED",
      "op": "assert // MERCHANT_NOT_WHITELISTED",
      "stack_out": [
        "merchant#0",
        "amount#0"
      ]
    },
    "529": {
      "op": "bytec_0 // \"asset_deposits\"",
      "defined_out": [
        "\"asset_deposits\"",
        "amount#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "\"asset_deposits\""
      ]
    },
    "530": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "\"asset_deposits\"",
        "amount#0",
        "materialized_values%1#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "\"asset_deposits\"",
        "materialized_values%1#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "box_prefixed_key%2#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "box_prefixed_key%2#0"
      ]
    },
    "533": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "535": {
      "op": "btoi",
      "defined_out": [
        "amount#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "536": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0",
        "merchant#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0",
        "0"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "maybe_exists%2#0",
        "0",
        "maybe_value_converted%0#0"
      ]
    },
    "538": {
      "op": "uncover 2",
      "stack_out": [
        "merchant#0",
        "amount#0",
        "0",
        "maybe_value_converted%0#0",
        "maybe_exists%2#0"
      ]
    },
    "540": {
      "op": "select",
      "defined_out": [
        "amount#0",
        "merchant#0",
        "vault_balance#0"
      ],
      "stack_out": [
        "merchant#0",
        "amount#0",
        "vault_balance#0"
      ]
    },
    "541": {
      "op": "swap",
      "stack_out": [
        "merchant#0",
        "vault_balance#0",
        "amount#0"
      ]
    },
    "542": {
      "op": "btoi",
      "defined_out": [
        "merchant#0",
        "tmp%6#0",
        "vault_balance#0"
      ],
      "stack_out": [
        "merchant#0",
        "vault_balance#0",
        "tmp%6#0"
      ]
    },
    "543": {
      "op": "dup2",
      "defined_out": [
        "merchant#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "vault_balance#0",
        "vault_balance#0 (copy)"
      ],
      "stack_out": [
        "merchant#0",
        "vault_balance#0",
        "tmp%6#0",
        "vault_balance#0 (copy)",
        "tmp%6#0 (copy)"
      ]
    },
    "544": {
      "op": ">=",
      "defined_out": [
        "merchant#0",
        "tmp%6#0",
        "tmp%7#0",
        "vault_balance#0"
      ],
      "stack_out": [
        "merchant#0",
        "vault_balance#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "545": {
      "error": "VAULT_EMPTY",
      "op": "assert // VAULT_EMPTY",
      "stack_out": [
        "merchant#0",
        "vault_balance#0",
        "tmp%6#0"
      ]
    },
    "546": {
      "op": "swap",
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "vault_balance#0"
      ]
    },
    "547": {
      "op": "dig 1",
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "vault_balance#0",
        "tmp%6#0 (copy)"
      ]
    },
    "549": {
      "op": "-",
      "defined_out": [
        "merchant#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "550": {
      "op": "bytec_0 // \"asset_deposits\"",
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "tmp%9#0",
        "\"asset_deposits\""
      ]
    },
    "551": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "\"asset_deposits\"",
        "materialized_values%2#0",
        "merchant#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "tmp%9#0",
        "\"asset_deposits\"",
        "materialized_values%2#0"
      ]
    },
    "553": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0",
        "merchant#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "tmp%9#0",
        "box_prefixed_key%3#0"
      ]
    },
    "554": {
      "op": "swap",
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "box_prefixed_key%3#0",
        "tmp%9#0"
      ]
    },
    "555": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%3#0",
        "encoded_value%0#0",
        "merchant#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "box_prefixed_key%3#0",
        "encoded_value%0#0"
      ]
    },
    "556": {
      "op": "box_put",
      "stack_out": [
        "merchant#0",
        "tmp%6#0"
      ]
    },
    "557": {
      "op": "itxn_begin"
    },
    "558": {
      "op": "intc_0 // 0",
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "0"
      ]
    },
    "559": {
      "op": "bytec_2 // \"vault_asset\"",
      "defined_out": [
        "\"vault_asset\"",
        "0",
        "merchant#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "0",
        "\"vault_asset\""
      ]
    },
    "560": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "merchant#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "561": {
      "error": "check self.vault_asset exists",
      "op": "assert // check self.vault_asset exists",
      "stack_out": [
        "merchant#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "562": {
      "op": "itxn_field XferAsset"
    },
    "564": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "merchant#0",
        "maybe_value%3#0"
      ]
    },
    "566": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "568": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "569": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "572": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "574": {
      "op": "itxn_submit"
    },
    "575": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "576": {
      "op": "return",
      "stack_out": []
    },
    "577": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.repay_loan[routing]",
      "params": {},
      "block": "repay_loan",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "580": {
      "op": "-",
      "defined_out": [
        "asset_txn#0"
      ],
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "581": {
      "op": "dup",
      "defined_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ],
      "stack_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ]
    },
    "582": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset_txn#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "gtxn_type%0#0"
      ]
    },
    "584": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "asset_txn#0",
        "axfer",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "585": {
      "op": "==",
      "defined_out": [
        "asset_txn#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "586": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "587": {
      "op": "dup",
      "stack_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ]
    },
    "588": {
      "op": "gtxns XferAsset",
      "stack_out": [
        "asset_txn#0",
        "tmp%0#0"
      ]
    },
    "590": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_txn#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%0#0",
        "0"
      ]
    },
    "591": {
      "op": "bytec_2 // \"vault_asset\"",
      "defined_out": [
        "\"vault_asset\"",
        "0",
        "asset_txn#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%0#0",
        "0",
        "\"vault_asset\""
      ]
    },
    "592": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_txn#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "593": {
      "error": "check self.vault_asset exists",
      "op": "assert // check self.vault_asset exists",
      "stack_out": [
        "asset_txn#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "594": {
      "op": "==",
      "defined_out": [
        "asset_txn#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%1#0"
      ]
    },
    "595": {
      "error": "INVALID_ASSET",
      "op": "assert // INVALID_ASSET",
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "596": {
      "op": "dup",
      "stack_out": [
        "asset_txn#0",
        "asset_txn#0 (copy)"
      ]
    },
    "597": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset_txn#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%2#0"
      ]
    },
    "599": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_txn#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "601": {
      "op": "==",
      "defined_out": [
        "asset_txn#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "tmp%4#0"
      ]
    },
    "602": {
      "error": "WRONG_RECEIVER",
      "op": "assert // WRONG_RECEIVER",
      "stack_out": [
        "asset_txn#0"
      ]
    },
    "603": {
      "op": "bytec_0 // \"asset_deposits\"",
      "defined_out": [
        "\"asset_deposits\"",
        "asset_txn#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "\"asset_deposits\""
      ]
    },
    "604": {
      "op": "txn Sender",
      "defined_out": [
        "\"asset_deposits\"",
        "asset_txn#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "\"asset_deposits\"",
        "materialized_values%0#0"
      ]
    },
    "606": {
      "op": "concat",
      "defined_out": [
        "asset_txn#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "box_prefixed_key%0#0"
      ]
    },
    "607": {
      "op": "box_get",
      "defined_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "608": {
      "op": "swap",
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "609": {
      "op": "btoi",
      "defined_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "610": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "0"
      ]
    },
    "611": {
      "op": "swap",
      "stack_out": [
        "asset_txn#0",
        "maybe_exists%1#0",
        "0",
        "maybe_value_converted%0#0"
      ]
    },
    "612": {
      "op": "uncover 2",
      "stack_out": [
        "asset_txn#0",
        "0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "614": {
      "op": "select",
      "defined_out": [
        "asset_txn#0",
        "current#0"
      ],
      "stack_out": [
        "asset_txn#0",
        "current#0"
      ]
    },
    "615": {
      "op": "swap",
      "stack_out": [
        "current#0",
        "asset_txn#0"
      ]
    },
    "616": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "current#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "current#0",
        "tmp%5#0"
      ]
    },
    "618": {
      "op": "+",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "619": {
      "op": "bytec_0 // \"asset_deposits\"",
      "stack_out": [
        "tmp%6#0",
        "\"asset_deposits\""
      ]
    },
    "620": {
      "op": "txn Sender",
      "defined_out": [
        "\"asset_deposits\"",
        "materialized_values%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"asset_deposits\"",
        "materialized_values%1#0"
      ]
    },
    "622": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "box_prefixed_key%1#0"
      ]
    },
    "623": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%1#0",
        "tmp%6#0"
      ]
    },
    "624": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ]
    },
    "625": {
      "op": "box_put",
      "stack_out": []
    },
    "626": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "627": {
      "op": "return",
      "stack_out": []
    },
    "628": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.get_balance[routing]",
      "params": {},
      "block": "get_balance",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "account#0"
      ],
      "stack_out": [
        "account#0"
      ]
    },
    "631": {
      "op": "dup",
      "defined_out": [
        "account#0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0",
        "account#0 (copy)"
      ]
    },
    "632": {
      "op": "len",
      "defined_out": [
        "account#0",
        "len%0#0"
      ],
      "stack_out": [
        "account#0",
        "len%0#0"
      ]
    },
    "633": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "account#0",
        "len%0#0"
      ],
      "stack_out": [
        "account#0",
        "len%0#0",
        "32"
      ]
    },
    "635": {
      "op": "==",
      "defined_out": [
        "account#0",
        "eq%0#0"
      ],
      "stack_out": [
        "account#0",
        "eq%0#0"
      ]
    },
    "636": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "account#0"
      ]
    },
    "637": {
      "op": "bytec 4 // \"algo_deposits\"",
      "defined_out": [
        "\"algo_deposits\"",
        "account#0"
      ],
      "stack_out": [
        "account#0",
        "\"algo_deposits\""
      ]
    },
    "639": {
      "op": "dig 1",
      "stack_out": [
        "account#0",
        "\"algo_deposits\"",
        "account#0 (copy)"
      ]
    },
    "641": {
      "op": "concat",
      "defined_out": [
        "account#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "account#0",
        "box_prefixed_key%0#0"
      ]
    },
    "642": {
      "op": "box_get",
      "defined_out": [
        "account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "account#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "643": {
      "op": "swap",
      "stack_out": [
        "account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "644": {
      "op": "btoi",
      "defined_out": [
        "account#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "account#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "645": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "account#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "account#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "0"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "account#0",
        "maybe_exists%0#0",
        "0",
        "maybe_value_converted%0#0"
      ]
    },
    "647": {
      "op": "uncover 2",
      "stack_out": [
        "account#0",
        "0",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "649": {
      "op": "select",
      "defined_out": [
        "account#0",
        "algo_balance#0"
      ],
      "stack_out": [
        "account#0",
        "algo_balance#0"
      ]
    },
    "650": {
      "op": "bytec_0 // \"asset_deposits\"",
      "defined_out": [
        "\"asset_deposits\"",
        "account#0",
        "algo_balance#0"
      ],
      "stack_out": [
        "account#0",
        "algo_balance#0",
        "\"asset_deposits\""
      ]
    },
    "651": {
      "op": "uncover 2",
      "stack_out": [
        "algo_balance#0",
        "\"asset_deposits\"",
        "account#0"
      ]
    },
    "653": {
      "op": "concat",
      "defined_out": [
        "algo_balance#0",
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "algo_balance#0",
        "box_prefixed_key%1#0"
      ]
    },
    "654": {
      "op": "box_get",
      "defined_out": [
        "algo_balance#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "algo_balance#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "655": {
      "op": "swap",
      "stack_out": [
        "algo_balance#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "656": {
      "op": "btoi",
      "defined_out": [
        "algo_balance#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "algo_balance#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "657": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algo_balance#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0",
        "0"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "algo_balance#0",
        "maybe_exists%1#0",
        "0",
        "maybe_value_converted%1#0"
      ]
    },
    "659": {
      "op": "uncover 2",
      "stack_out": [
        "algo_balance#0",
        "0",
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "661": {
      "op": "select",
      "defined_out": [
        "algo_balance#0",
        "asset_balance#0"
      ],
      "stack_out": [
        "algo_balance#0",
        "asset_balance#0"
      ]
    },
    "662": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "663": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "664": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "666": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "667": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "668": {
      "op": "log",
      "stack_out": []
    },
    "669": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "670": {
      "op": "return",
      "stack_out": []
    },
    "671": {
      "subroutine": "smart_contracts.vaultlending.contract.Vaultlending.hello[routing]",
      "params": {},
      "block": "hello",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "675": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "676": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "677": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "679": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "680": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "682": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "683": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "684": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "685": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "688": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \"",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "\"Hello, \""
      ]
    },
    "697": {
      "op": "swap",
      "stack_out": [
        "\"Hello, \"",
        "name#0"
      ]
    },
    "698": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "699": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "700": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "701": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "702": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "705": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "707": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "711": {
      "op": "log",
      "stack_out": []
    },
    "712": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "713": {
      "op": "return",
      "stack_out": []
    }
  }
}